import JSZip from 'jszip';
import { Dbase, DbaseVersion, Shape, ShapeIndex } from '../../types';
import { DbfOptions } from './parsers/dbf';
import { ShapefileContents } from './Shapefile.types';
type JSZipLoadAsyncParamters = Parameters<typeof JSZip.loadAsync>;
declare class Shapefile {
    protected jszip: JSZip;
    readonly contents: ShapefileContents;
    constructor(contents: ShapefileContents);
    parse(key: 'shp'): Shape;
    parse(key: 'shx'): ShapeIndex;
    parse(key: 'dbf', options: DbfOptions): Dbase<DbaseVersion, typeof options.properties>;
    static load: typeof load;
}
/**
 * Load a .zip file containing one or more shapefiles
 *
 * The following file structure would result in a record containing two
 * shapefile objects, each named respectively "agm0" and "agm1"
 * ```txt
 * agm.zip
 * ├── agm0
 * │   ├── agm0.shp
 * │   ├── agm0.shx
 * │   └── agm0.dbf
 * └── agm1
 *     ├── agm1.shp
 *     ├── agm1.shx
 *     └── agm1.dbf
 * ```
 */
export declare function load(...params: JSZipLoadAsyncParamters): Promise<Record<string, Shapefile>>;
export default Shapefile;
//# sourceMappingURL=Shapefile.d.ts.map